" An example for a vimrc file.
"
" Maintainer:   Bram Moolenaar <Bram@vim.org>
" Last change:  2008 Jul 02
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc

"         for Amiga:
"  for MS-DOS and Win32:  $VIM\_vimrc
"       for OpenVMS:
" When started as "evim", evim.vim will already have done these settings.
" Use Vim settings, rather then Vi settings ( much better! ).
" This must be first, because it changes other options as a side effect.

call pathogen#infect()

let g:Powerline_symbols = 'fancy'
let g:airline_powerline_fonts=1
set laststatus=2

" {{{ SETTINGS
set nocompatible
set term=rxvt-256color

" Set to auto read when a file is changed from the outside"
set autoread

set fileencoding=utf-8
set termencoding=utf-8
set encoding=utf-8

"Theme l√©g√®rement modifier pour convenir √† mes gouts
set t_Co=256
" let g:solarized_termcolors=256    "default value is 16
let g:solarized_contrast="high"    "default value is normal
"let g:solarized_visibility="low"    "default value is normal
"let g:solarized_diffmode="high"    "default value is normal
syntax enable
set background=dark
colorscheme solarized


setlocal foldmethod=marker "Permet de placer des des marker avec ZF"

set hidden                 "Meilleure gestion des buffers

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50              " keep 50 lines of command line history
set ruler                   " show the cursor position all the time
set showcmd                 " display incomplete commands
set autowrite
set nocp
set tabstop=4
set shiftwidth=4
set expandtab
set number
set shortmess=at


" RECHERCHE
set ignorecase
set smartcase
set hlsearch
set incsearch               " do incremental searching

"d√©sactive la recherche avec !!
nmap <silent> !! :nohlsearch<CR>

filetype on
filetype plugin on
filetype indent on
autocmd BufNewFile, BufRead *.cpp set formatprg=astyle\ -T4pb

"Permet de sauvegarder tous les fichiers temporaires dans un m√™me dossier
"Eviter d'avoir des fichiers fant√¥mes partout...
set backupdir=~/.vim/tmp
set directory=~/.vim/tmp

let mapleader="√π"

"}}}

"{{{ KEYBINDS
inoremap " ""<Left>
inoremap ( ()<Left>
inoremap ' ''<Left>
inoremap [ []<Left>

"formatte le code source avec astyle ctrl-i
map <leader>i :call Indentation()<cr><cr>

" "Eclim autocompletion on ctrl-space
" imap <C-Space> <C-x><C-u>
" ""imap <C-x><C-o> <C-x><C-u>
" imap <C-@> <C-Space>
"
"}}}

" "{{{ CTAGS
" let Tlist_Ctags_Cmd = "/usr/bin/ctags"
" let Tlist_WinWidth = 40
" let Tlist_GainFocus_On_ToggleOpen = 1
" let Tlist_Close_On_Select                 = 1
"
" map <F4> :TlistToggle<cr>
" map <F12> :!ctags -R --c++-kinds=+pl --fields=+iaS --extra=+q .<CR>
"
" set tags+=/home/erebe/.vim/tags/cpp.tags
" set tags+=/home/erebe/.vim/tags/boost
" set tags+=/home/erebe/Ressources/Code/cpp/courriel/tags
" set tags+=tags;
" set tags+=tags
"
" highlight Pmenu ctermbg=238 gui=bold
" "}}}

" "{{{ CLANG AUTOCOMPLETE
" "
" " SuperTab option for context aware completion
" let g:SuperTabDefaultCompletionType="context"
"
" " Disable auto popup,  use <Tab> to autocomplete
" let g:clang_complete_auto=1
"
" " Show clang errors in the quickfix window
" let g:clang_complete_copen=1
"
" " Do some magic after ( ,
" let g:clang_snippets=1
"
" " Magic include
" let g:clang_user_options="-I/usr/include/c++/4.7.2/ -I/usr/include/c++/4.7.2/x86_64-unknown-linux-gnu -I/usr/lib/gcc/x86_64-unknown-linux-gnu/4.7.2/include -I/usr/lib/gcc/x86_64-unknown-linux-gnu/4.7.2/include-fixed"
"
" "}}}

"{{{ NERDTree

map <F1> :NERDTreeToggle<cr>
imap <F1> <Esc>:NERDTreeToggle<cr><i>
map bn :Bookmark <cr>
map bc :ClearAllBookmarks <cr>



let NERDTreeIgnore = ['\.o$', '\.ui$', '\.qrc$', '^moc_', '^ui_' ]
"}}}

"{{{ HASKELL
au BufEnter *.hs compiler ghc
let g:haddock_browser="/usr/bin/firefox"
let g:haddock_docdir= $HSENV."/.hsenv/cabal/share/doc/"
let g:haddock_indexfiledir=$HSENV."/.hsenv/"
let maplocalleader="√π"
"}}}

"{{{ A.vim
set <S-F2>=[24~
map <F2> :A<CR>
inoremap <F2> <Esc>:A<CR><i>
map <S-F2> :AV<CR>

"}}}

"{{{ DIVERS

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

set mouse=a

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent        " always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
            \ | wincmd p | diffthis
endif

func! Indentation()

" let pos=getpos('.')
" exec " % !astyle"
" exec "w"
" call setpos( '.',  pos)
exec "silent! %s/\\s\\+$//"
exec "retab"

endfunc

"}}}

"{{{ CSCOPE
" function! RebuildCscopeTags()
"     :call xolox#shell#execute('buildcscopetags %:p:h', 0)
"     :cscope add %:p:h
" endfunction
"
" set cst
" set csto=0
" nmap <leader>t :call RebuildCscopeTags()<CR>
" map fl :cs add cscope.out<CR>
" map fd :cs find g <C-R>=expand("<cword>")<CR><CR>
" map ff :cs find f <C-R>=expand("<cword>")<CR><CR>
" map fs :cs find s <C-R>=expand("<cword>")<CR><CR>
" map fc :cs find c <C-R>=expand("<cword>")<CR><CR>
" map ft :cs find e <C-R>=expand("<cword>")<CR><CR>
" map fi :cs find i <C-R>=expand("<cword>")<CR><CR>
" map fa :cs find t <C-R>=expand("<cword>")<CR><CR>
"
"}}}

"{{{ GVIM
function! ToggleGUICruft()
  if &guioptions=='i'
    exec('set guioptions=imTrL')
  else
    exec('set guioptions=i')
  endif
endfunction

map <F11> <Esc>:call ToggleGUICruft()<cr>

" by default, hide gui menus
set guioptions=i
set guifont=inconsolata-dz\ for\ Powerline
"}}}

"{{{ TAGBAR
nmap <F3> :TagbarToggle<CR>
"}}}

